# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  release:
    types: [created]

env:
  CARGO_TERM_COLOR: always

###############################################################################
# 1. Plasma‑6 widget
###############################################################################
jobs:
  widget:
    name: Plasma Widget
    runs-on: ubuntu-latest
    container:
      image: debian:sid # KF6 & Qt 6 are already here
    env:
      DEBIAN_FRONTEND: noninteractive
      DESTDIR: ${{ github.workspace }}/artifacts
    steps:
      - uses: actions/checkout@v4

      - name: Install KF6 + Qt 6 headers
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
            build-essential ninja-build cmake git gettext \
            extra-cmake-modules \
            qt6-base-dev qt6-declarative-dev qt6-tools-dev-tools \
            libplasma-dev \
            libkf6config-dev libkf6i18n-dev \
            libkf6notifications-dev libkf6windowsystem-dev

      - name: Configure
        run: cmake -S plasmoid -B build -GNinja \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: cmake --build build --parallel

      - name: (Optional) unit tests
        run: ctest --test-dir build --output-on-failure || true

      - name: Stage install
        run: cmake --install build --prefix "$DESTDIR"

      - uses: actions/upload-artifact@v4
        with:
          name: plasmoid
          path: artifacts

  ###############################################################################
  # 2. Rust background service
  ###############################################################################
  rust:
    name: Rust Service
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            service/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('service/Cargo.lock') }}

      - name: rustfmt
        working-directory: service
        run: cargo fmt --all -- --check

      - name: clippy
        working-directory: service
        run: cargo clippy -- -D warnings

      - name: tests
        working-directory: service
        run: cargo test --verbose

      - name: build (release)
        working-directory: service
        run: cargo build --release --verbose

  ###############################################################################
  # 3. Static validation of project layout
  ###############################################################################
  validate:
    name: Validate Plasmoid Layout
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check required files & perms
        run: |
          set -euo pipefail
          test -f plasmoid/metadata.json
          test -f plasmoid/contents/ui/main.qml
          jq . plasmoid/metadata.json >/dev/null
          for f in scripts/install.sh scripts/uninstall.sh; do
            [ -x "$f" ] || { echo "$f must be +x"; exit 1; }
          done
